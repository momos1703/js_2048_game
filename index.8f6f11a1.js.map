{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    static Status = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    constructor(){\n        this.currentState = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.status = $a5fd07fa01589658$var$Game.Status.idle;\n        this.score = 0;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.currentState;\n    }\n    getStatus() {\n        this.updateStatus();\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.Status.playing;\n        this.currentState = this.makeDeepCopyState(this.initialState);\n        this.createRandomTile();\n        this.createRandomTile();\n        this.showTiles();\n    }\n    restart() {\n        this.clearTheBoard();\n        this.showTiles();\n        this.status = $a5fd07fa01589658$var$Game.Status.idle;\n        this.score = 0;\n    }\n    moveUp() {\n        if (this.status !== $a5fd07fa01589658$var$Game.Status.playing) return;\n        let didTilesMove = false;\n        for(let column = 0; column < 4; column++){\n            const columnData = this.currentState.map((row)=>row[column]);\n            const { newLine: newLine, moved: moved } = this.processColumn(columnData);\n            if (moved) didTilesMove = true;\n            for(let row = 0; row < 4; row++)this.currentState[row][column] = newLine[row];\n        }\n        if (didTilesMove) this.createRandomTile();\n        return didTilesMove;\n    }\n    moveDown() {\n        if (this.status !== $a5fd07fa01589658$var$Game.Status.playing) return;\n        let didTilesMove = false;\n        for(let column = 0; column < 4; column++){\n            const columnData = this.currentState.map((row)=>row[column]);\n            const reversedColumn = columnData.reverse();\n            const { newLine: newLine, moved: moved } = this.processColumn(reversedColumn);\n            if (moved) didTilesMove = true;\n            const correctedColumn = newLine.reverse();\n            for(let row = 0; row < 4; row++)this.currentState[row][column] = correctedColumn[row];\n        }\n        if (didTilesMove) this.createRandomTile();\n        return didTilesMove;\n    }\n    moveLeft() {\n        if (this.status !== $a5fd07fa01589658$var$Game.Status.playing) return;\n        let didTilesMove = false;\n        for(let row = 0; row < 4; row++){\n            const rowData = this.currentState[row];\n            const { newLine: newLine, moved: moved } = this.processColumn(rowData);\n            if (moved) didTilesMove = true;\n            this.currentState[row] = newLine;\n        }\n        if (didTilesMove) this.createRandomTile();\n        return didTilesMove;\n    }\n    moveRight() {\n        if (this.status !== $a5fd07fa01589658$var$Game.Status.playing) return;\n        let didTilesMove = false;\n        for(let row = 0; row < 4; row++){\n            const rowData = this.currentState[row];\n            const reversedRow = rowData.reverse();\n            const { newLine: newLine, moved: moved } = this.processColumn(reversedRow);\n            if (moved) didTilesMove = true;\n            const correctedRow = newLine.reverse();\n            this.currentState[row] = correctedRow;\n        }\n        if (didTilesMove) this.createRandomTile();\n        return didTilesMove;\n    }\n    processColumn(line) {\n        const newLine = [\n            0,\n            0,\n            0,\n            0\n        ];\n        let mergeOccurred = false;\n        let position = 0;\n        let scoreIncrease = 0;\n        for(let i = 0; i < line.length; i++){\n            if (line[i] === 0) continue;\n            if (!mergeOccurred && position > 0 && newLine[position - 1] === line[i]) {\n                newLine[position - 1] *= 2;\n                scoreIncrease += newLine[position - 1];\n                mergeOccurred = true;\n            } else {\n                newLine[position] = line[i];\n                position++;\n                mergeOccurred = false;\n            }\n        }\n        const moved = !this.areLinesEqual(line, newLine);\n        this.score += scoreIncrease;\n        return {\n            newLine: newLine,\n            moved: moved\n        };\n    }\n    getColumn(index) {\n        return this.currentState.map((row)=>row[index]);\n    }\n    setColumn(index, column) {\n        for(let row = 0; row < 4; row++)this.currentState[row][index] = column[row];\n    }\n    areLinesEqual(line1, line2) {\n        return line1.every((value, index)=>value === line2[index]);\n    }\n    makeDeepCopyState(stateForCopy) {\n        return stateForCopy.map((row)=>[\n                ...row\n            ]);\n    }\n    createRandomTile() {\n        const randomTile = this.randomNumber();\n        if (!randomTile) return;\n        const [row, column] = randomTile;\n        this.currentState[row][column] = this.generateTileValue();\n        this.showTiles();\n    }\n    randomNumber() {\n        const randomRange = this.getRequiredTiles(0);\n        if (randomRange.length === 0) return null;\n        const randomNumber = Math.floor(Math.random() * randomRange.length);\n        return randomRange[randomNumber];\n    }\n    getRequiredTiles(requiredValue) {\n        const requiredTiles = [];\n        for(let row = 0; row < this.currentState.length; row++){\n            for(let cell = 0; cell < this.currentState[row].length; cell++)if (this.currentState[row][cell] === requiredValue) requiredTiles.push([\n                row,\n                cell\n            ]);\n        }\n        return requiredTiles;\n    }\n    generateTileValue() {\n        const randomValue = Math.random();\n        return randomValue > 0.9 ? 4 : 2;\n    }\n    updateStatus() {\n        if (this.didPlayerWin()) this.status = $a5fd07fa01589658$var$Game.Status.win;\n        else if (this.didPlayerLose()) this.status = $a5fd07fa01589658$var$Game.Status.lose;\n    }\n    didPlayerWin() {\n        return this.getRequiredTiles(2048).length > 0;\n    }\n    didPlayerLose() {\n        if (this.getRequiredTiles(0).length > 0) return false;\n        if (!this.checkEqualNeighbors()) return false;\n        return true;\n    }\n    checkEqualNeighbors() {\n        for(let row = 0; row < 4; row++)for(let column = 0; column < 4; column++){\n            if (column < 3 && this.currentState[row][column] === this.currentState[row][column + 1]) return false;\n            if (row < 3 && this.currentState[row][column] === this.currentState[row + 1][column]) return false;\n        }\n        return true;\n    }\n    showTiles() {\n        const tiles = document.getElementsByClassName(\"field-cell\");\n        let fieldCounter = 0;\n        for(let row = 0; row < 4; row++)for(let column = 0; column < 4; column++){\n            const tileValue = this.currentState[row][column];\n            if (tileValue === 0) {\n                tiles[fieldCounter].innerText = \"\";\n                tiles[fieldCounter].className = `field-cell`;\n            } else {\n                tiles[fieldCounter].innerText = tileValue;\n                tiles[fieldCounter].className = `field-cell field-cell--${tileValue}`;\n            }\n            fieldCounter++;\n        }\n    }\n    clearTheBoard() {\n        this.currentState = this.makeDeepCopyState(this.initialState);\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startBtn = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\n$09e991522ca7e64e$var$initialize();\nfunction $09e991522ca7e64e$var$initialize() {\n    $09e991522ca7e64e$var$startBtn.addEventListener(\"click\", $09e991522ca7e64e$var$handleStartClick);\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyboardActions);\n}\nfunction $09e991522ca7e64e$var$handleStartClick() {\n    if ($09e991522ca7e64e$var$startBtn.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$startBtn.className = \"button restart\";\n        $09e991522ca7e64e$var$startBtn.textContent = \"Restart\";\n        $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.start();\n    } else {\n        $09e991522ca7e64e$var$startBtn.className = \"button start\";\n        $09e991522ca7e64e$var$startBtn.textContent = \"Start\";\n        $09e991522ca7e64e$var$startMessage.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$score.textContent = \"0\";\n        $09e991522ca7e64e$var$game.restart();\n    }\n}\nfunction $09e991522ca7e64e$var$handleKeyboardActions(keyEvent) {\n    keyEvent.preventDefault();\n    let didTilesMoved = false;\n    switch(keyEvent.key){\n        case \"ArrowUp\":\n            didTilesMoved = $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            didTilesMoved = $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowRight\":\n            didTilesMoved = $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowLeft\":\n            didTilesMoved = $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        default:\n            break;\n    }\n    $09e991522ca7e64e$var$handleNumbersMove(didTilesMoved);\n}\nfunction $09e991522ca7e64e$var$handleNumbersMove(numbersMove) {\n    if (numbersMove) {\n        $09e991522ca7e64e$var$updateScore($09e991522ca7e64e$var$game.getScore());\n        $09e991522ca7e64e$var$updateStatusMessage($09e991522ca7e64e$var$game.getStatus());\n    }\n}\nfunction $09e991522ca7e64e$var$updateScore(newScore) {\n    $09e991522ca7e64e$var$score.textContent = newScore;\n}\nfunction $09e991522ca7e64e$var$updateStatusMessage(newStatus) {\n    if (newStatus === $a5fd07fa01589658$exports.Status.win) $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n    else if (newStatus === $a5fd07fa01589658$exports.Status.lose) $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n}\n\n\n//# sourceMappingURL=index.8f6f11a1.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startBtn = document.querySelector('.start');\nconst score = document.querySelector('.game-score');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\n\ninitialize();\n\nfunction initialize() {\n  startBtn.addEventListener('click', handleStartClick);\n  document.addEventListener('keydown', handleKeyboardActions);\n}\n\nfunction handleStartClick() {\n  if (startBtn.classList.contains('start')) {\n    startBtn.className = 'button restart';\n    startBtn.textContent = 'Restart';\n    startMessage.classList.add('hidden');\n    game.start();\n  } else {\n    startBtn.className = 'button start';\n    startBtn.textContent = 'Start';\n    startMessage.classList.remove('hidden');\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n    score.textContent = '0';\n\n    game.restart();\n  }\n}\n\nfunction handleKeyboardActions(keyEvent) {\n  keyEvent.preventDefault();\n\n  let didTilesMoved = false;\n\n  switch (keyEvent.key) {\n    case 'ArrowUp':\n      didTilesMoved = game.moveUp();\n      break;\n    case 'ArrowDown':\n      didTilesMoved = game.moveDown();\n      break;\n    case 'ArrowRight':\n      didTilesMoved = game.moveRight();\n      break;\n    case 'ArrowLeft':\n      didTilesMoved = game.moveLeft();\n      break;\n    default:\n      break;\n  }\n\n  handleNumbersMove(didTilesMoved);\n}\n\nfunction handleNumbersMove(numbersMove) {\n  if (numbersMove) {\n    updateScore(game.getScore());\n    updateStatusMessage(game.getStatus());\n  }\n}\n\nfunction updateScore(newScore) {\n  score.textContent = newScore;\n}\n\nfunction updateStatusMessage(newStatus) {\n  if (newStatus === Game.Status.win) {\n    winMessage.classList.remove('hidden');\n  } else if (newStatus === Game.Status.lose) {\n    loseMessage.classList.remove('hidden');\n  }\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\n\nclass Game {\n  static Status = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  initialState = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  constructor() {\n    this.currentState = this.initialState.map((row) => [...row]);\n    this.status = Game.Status.idle;\n    this.score = 0;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.currentState;\n  }\n\n  getStatus() {\n    this.updateStatus();\n\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.Status.playing;\n    this.currentState = this.makeDeepCopyState(this.initialState);\n    this.createRandomTile();\n    this.createRandomTile();\n    this.showTiles();\n  }\n\n  restart() {\n    this.clearTheBoard();\n    this.showTiles();\n    this.status = Game.Status.idle;\n    this.score = 0;\n  }\n\n  moveUp() {\n    if (this.status !== Game.Status.playing) {\n      return;\n    }\n\n    let didTilesMove = false;\n\n    for (let column = 0; column < 4; column++) {\n      const columnData = this.currentState.map((row) => row[column]);\n      const { newLine, moved } = this.processColumn(columnData);\n\n      if (moved) {\n        didTilesMove = true;\n      }\n\n      for (let row = 0; row < 4; row++) {\n        this.currentState[row][column] = newLine[row];\n      }\n    }\n\n    if (didTilesMove) {\n      this.createRandomTile();\n    }\n\n    return didTilesMove;\n  }\n\n  moveDown() {\n    if (this.status !== Game.Status.playing) {\n      return;\n    }\n\n    let didTilesMove = false;\n\n    for (let column = 0; column < 4; column++) {\n      const columnData = this.currentState.map((row) => row[column]);\n      const reversedColumn = columnData.reverse();\n      const { newLine, moved } = this.processColumn(reversedColumn);\n\n      if (moved) {\n        didTilesMove = true;\n      }\n\n      const correctedColumn = newLine.reverse();\n\n      for (let row = 0; row < 4; row++) {\n        this.currentState[row][column] = correctedColumn[row];\n      }\n    }\n\n    if (didTilesMove) {\n      this.createRandomTile();\n    }\n\n    return didTilesMove;\n  }\n\n  moveLeft() {\n    if (this.status !== Game.Status.playing) {\n      return;\n    }\n\n    let didTilesMove = false;\n\n    for (let row = 0; row < 4; row++) {\n      const rowData = this.currentState[row];\n      const { newLine, moved } = this.processColumn(rowData);\n\n      if (moved) {\n        didTilesMove = true;\n      }\n\n      this.currentState[row] = newLine;\n    }\n\n    if (didTilesMove) {\n      this.createRandomTile();\n    }\n\n    return didTilesMove;\n  }\n\n  moveRight() {\n    if (this.status !== Game.Status.playing) {\n      return;\n    }\n\n    let didTilesMove = false;\n\n    for (let row = 0; row < 4; row++) {\n      const rowData = this.currentState[row];\n      const reversedRow = rowData.reverse();\n      const { newLine, moved } = this.processColumn(reversedRow);\n\n      if (moved) {\n        didTilesMove = true;\n      }\n\n      const correctedRow = newLine.reverse();\n\n      this.currentState[row] = correctedRow;\n    }\n\n    if (didTilesMove) {\n      this.createRandomTile();\n    }\n\n    return didTilesMove;\n  }\n\n  processColumn(line) {\n    const newLine = [0, 0, 0, 0];\n    let mergeOccurred = false;\n    let position = 0;\n    let scoreIncrease = 0;\n\n    for (let i = 0; i < line.length; i++) {\n      if (line[i] === 0) {\n        continue;\n      }\n\n      if (!mergeOccurred && position > 0 && newLine[position - 1] === line[i]) {\n        newLine[position - 1] *= 2;\n        scoreIncrease += newLine[position - 1];\n        mergeOccurred = true;\n      } else {\n        newLine[position] = line[i];\n        position++;\n        mergeOccurred = false;\n      }\n    }\n\n    const moved = !this.areLinesEqual(line, newLine);\n\n    this.score += scoreIncrease;\n\n    return { newLine, moved };\n  }\n\n  getColumn(index) {\n    return this.currentState.map((row) => row[index]);\n  }\n\n  setColumn(index, column) {\n    for (let row = 0; row < 4; row++) {\n      this.currentState[row][index] = column[row];\n    }\n  }\n\n  areLinesEqual(line1, line2) {\n    return line1.every((value, index) => value === line2[index]);\n  }\n\n  makeDeepCopyState(stateForCopy) {\n    return stateForCopy.map((row) => [...row]);\n  }\n\n  createRandomTile() {\n    const randomTile = this.randomNumber();\n\n    if (!randomTile) {\n      return;\n    }\n\n    const [row, column] = randomTile;\n\n    this.currentState[row][column] = this.generateTileValue();\n    this.showTiles();\n  }\n\n  randomNumber() {\n    const randomRange = this.getRequiredTiles(0);\n\n    if (randomRange.length === 0) {\n      return null;\n    }\n\n    const randomNumber = Math.floor(Math.random() * randomRange.length);\n\n    return randomRange[randomNumber];\n  }\n\n  getRequiredTiles(requiredValue) {\n    const requiredTiles = [];\n\n    for (let row = 0; row < this.currentState.length; row++) {\n      for (let cell = 0; cell < this.currentState[row].length; cell++) {\n        if (this.currentState[row][cell] === requiredValue) {\n          requiredTiles.push([row, cell]);\n        }\n      }\n    }\n\n    return requiredTiles;\n  }\n\n  generateTileValue() {\n    const randomValue = Math.random();\n\n    return randomValue > 0.9 ? 4 : 2;\n  }\n\n  updateStatus() {\n    if (this.didPlayerWin()) {\n      this.status = Game.Status.win;\n    } else if (this.didPlayerLose()) {\n      this.status = Game.Status.lose;\n    }\n  }\n\n  didPlayerWin() {\n    return this.getRequiredTiles(2048).length > 0;\n  }\n\n  didPlayerLose() {\n    if (this.getRequiredTiles(0).length > 0) {\n      return false;\n    }\n\n    if (!this.checkEqualNeighbors()) {\n      return false;\n    }\n\n    return true;\n  }\n\n  checkEqualNeighbors() {\n    for (let row = 0; row < 4; row++) {\n      for (let column = 0; column < 4; column++) {\n        if (\n          column < 3 &&\n          this.currentState[row][column] === this.currentState[row][column + 1]\n        ) {\n          return false;\n        }\n\n        if (\n          row < 3 &&\n          this.currentState[row][column] === this.currentState[row + 1][column]\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  showTiles() {\n    const tiles = document.getElementsByClassName('field-cell');\n\n    let fieldCounter = 0;\n\n    for (let row = 0; row < 4; row++) {\n      for (let column = 0; column < 4; column++) {\n        const tileValue = this.currentState[row][column];\n\n        if (tileValue === 0) {\n          tiles[fieldCounter].innerText = '';\n          tiles[fieldCounter].className = `field-cell`;\n        } else {\n          tiles[fieldCounter].innerText = tileValue;\n          tiles[fieldCounter].className = `field-cell field-cell--${tileValue}`;\n        }\n\n        fieldCounter++;\n      }\n    }\n  }\n\n  clearTheBoard() {\n    this.currentState = this.makeDeepCopyState(this.initialState);\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","Status","idle","playing","win","lose","initialState","constructor","currentState","map","row","status","score","getScore","getState","getStatus","updateStatus","start","makeDeepCopyState","createRandomTile","showTiles","restart","clearTheBoard","moveUp","didTilesMove","column","columnData","newLine","moved","processColumn","moveDown","reversedColumn","reverse","correctedColumn","moveLeft","rowData","moveRight","reversedRow","correctedRow","line","mergeOccurred","position","scoreIncrease","i","length","areLinesEqual","getColumn","index","setColumn","line1","line2","every","value","stateForCopy","randomTile","randomNumber","generateTileValue","randomRange","getRequiredTiles","Math","floor","random","requiredValue","requiredTiles","cell","push","randomValue","didPlayerWin","didPlayerLose","checkEqualNeighbors","tiles","document","getElementsByClassName","fieldCounter","tileValue","innerText","className","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$startBtn","querySelector","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$loseMessage","addEventListener","classList","contains","textContent","add","remove","keyEvent","newScore","newStatus","preventDefault","didTilesMoved","key"],"version":3,"file":"index.8f6f11a1.js.map"}